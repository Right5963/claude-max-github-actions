name: Claude MCP Research Automation
# @akira_papa_IT氏のSelf-hosted Runners手法を参考にした実装

on:
  workflow_dispatch:
    inputs:
      research_type:
        description: 'リサーチタイプ'
        required: true
        default: 'instant'
        type: choice
        options:
        - instant
        - deep
        - session
      query:
        description: 'リサーチクエリ'
        required: true
        type: string
      save_to_obsidian:
        description: 'Obsidianに保存'
        required: false
        default: true
        type: boolean

  schedule:
    # 毎日9時に技術トレンド調査
    - cron: '0 0 * * *'

  repository_dispatch:
    types: [research-trigger]

jobs:
  mcp-research:
    runs-on: self-hosted  # @akira_papa_IT推奨のself-hosted runners
    timeout-minutes: 5    # GitHub Actions 2,000分枠内で効率運用
    
    env:
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        pip install requests
        
    - name: Verify MCP integration
      run: |
        # MCP統合確認
        claude mcp list
        
    - name: Execute Claude Max Integration Research
      id: research
      env:
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        # Claude API直接統合でのリサーチ実行
        QUERY="${{ github.event.inputs.query || 'AI技術トレンド 2024' }}"
        TYPE="${{ github.event.inputs.research_type || 'instant' }}"
        
        echo "🔍 Starting Claude Max integrated research: $TYPE - $QUERY"
        
        # @akira_papa_IT方式: Claude API直接統合
        python3 claude_api_direct.py "$TYPE" "$QUERY"
        
        # 結果ファイル確認
        if [ -f "github_artifacts/research_report_"*".md" ]; then
          echo "research_success=true" >> $GITHUB_OUTPUT
          echo "report_file=$(ls github_artifacts/research_report_*.md | head -1)" >> $GITHUB_OUTPUT
        else
          echo "research_success=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Process results
      run: |
        # 結果処理とフォーマット
        if [ -f "research_result.md" ]; then
          echo "📊 Research result size: $(wc -l < research_result.md) lines"
          echo "research_success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Research failed"
          echo "research_success=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Upload to Obsidian
      if: ${{ github.event.inputs.save_to_obsidian == 'true' && steps.research.outputs.research_success == 'true' }}
      run: |
        # Obsidian自動保存
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FILENAME="GitHub_Actions_Research_${TIMESTAMP}.md"
        
        # Obsidianディレクトリに保存
        mkdir -p "./obsidian_exports"
        cp research_result.md "./obsidian_exports/$FILENAME"
        
        echo "📝 Saved to: obsidian_exports/$FILENAME"
        
    - name: Create Issue with results
      if: steps.research.outputs.research_success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const result = fs.readFileSync('research_result.md', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🔍 MCP Research Results: ${{ github.event.inputs.query }}`,
            body: `## GitHub Actions MCP Research\n\n${result}\n\n---\n*Generated by Claude MCP Research Automation*`
          });
          
    - name: Notify completion
      run: |
        echo "🎉 Claude MCP Research Automation completed!"
        echo "📊 Usage tracking available via: claude mcp call perplexity-research perplexity_usage_stats"
        
    - name: Cleanup
      if: always()
      run: |
        # 一時ファイルクリーンアップ
        rm -f research_result.md
        
  schedule-research:
    if: github.event_name == 'schedule'
    runs-on: self-hosted
    timeout-minutes: 10
    
    steps:
    - name: Daily Tech Trend Research
      run: |
        # 毎日の定期リサーチ
        QUERIES=(
          "AI開発 最新トレンド"
          "Claude MCP 新機能"
          "GitHub Actions 最新情報"
          "プログラミング トレンド 2024"
        )
        
        for query in "${QUERIES[@]}"; do
          echo "🔍 Researching: $query"
          
          # MCP経由でリサーチ実行
          claude --model sonnet <<EOF
          result = mcp__perplexity_research__perplexity_instant_search("$query")
          
          # 結果を日別フォルダに保存
          import os
          from datetime import datetime
          
          date_str = datetime.now().strftime("%Y-%m-%d")
          os.makedirs(f"daily_research/{date_str}", exist_ok=True)
          
          safe_query = "$query".replace(" ", "_").replace("/", "_")
          with open(f"daily_research/{date_str}/{safe_query}.md", "w") as f:
              f.write(f"# {query}\n\n{result}")
          EOF
          
          sleep 30  # API制限考慮
        done